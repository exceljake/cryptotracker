exit
response
get "/wallets"
get "/wallets", headers:new_auth_header
response.headers.merge!(new_auth_header).to_s
new_auth_header
get "/wallets", headers:new_auth_header
request.headers
request
get "/wallets"
request.headers.merge! new_auth_header
new_auth_header = current_user.build_auth_header(token.token, token.client)
current_user.tokens[token.client] = {token:  token.token_hash,expiry: token.expiry}
current_user.tokens[token.client] = {
  }
    expiry: token.expiry
    token:  token.token_hash,
current_user.tokens[token.client] = {
token = DeviseTokenAuth::TokenFactory.create
resource
get "/wallets"
response
response.has_header? "access-token"
login_as current_user
login
response.has_header? "access-token"
exit
current_user
exit
subject
controller
exit
current_price != []
current_price = a.select { |cc| cc["symbol"] == "astr" }
current_price.first["current_price"]
current_price != []
current_price
current_price = a.select { |cs| cs["symbol"] == cc.symbol}
cc = wallet.cryptocurrencies.first 
current_price = a.select { |cc| cc["symbol"] == wallet.cryptocurrencies.first.symbol}
wallet.cryptocurrencies.first
wallet.cryptocurrencies
wallet = @wallets.first
wallet.cryptocurrencies.first 
@wallets.first.cryptocurrencies
@wallets = Wallet.where(user_id: current_user.id)
a = top_100
exit
a.select { |cc| cc["symbol"] == "astr"}
a = top_100
a.select { |cc| cc["symbol"] == "astr"}
exit
current_price.first["current_price"]
current_price.first.current_price
current_price.first
current_price["curent_price"]
current_price[]["curent_price"]
current_price[]["curent_price]
current_price
current_price["current_price"]
current_price[:current_price]
current_price.current_price
current_price = a.select { |cc| cc["symbol"] == cryptocurrency.symbol}
a = top_100
cryptocurrency
cryptocurrency = @wallet.cryptocurrencies.first
exit
a
@wallet.cryptocurrencies[0].symbol
@wallet.cryptocurrencies.first
@wallet.cryptocurrencies
cryptocurrency.symbol
a.select { |cc| cc["symbol"] == cryptocurrency.symbol})
a.select { |cc| cc["symbol"] == cryptocurrency.symbol})["current_price"]
a = top_100
exit
@wallet.cryptocurrencies[0].symbol
@wallet.cryptocurrencies
cryptocurrency.symbol
    end
      cryptocurrency.update(price: a.select { |cc| cc["symbol"] == (params[:cryptocurrency][:symbol])})
@wallet.cryptocurrencies.each do |cryptocurrency|
a
a = top_100
a
exit
cryptocurrency
exit
top_100.select { |cc| cc["symbol"] == (params[:cryptocurrency][:symbol])}
@cryptocurrency
exit
top_100.select { |cc| cc["symbol"] == (params[:cryptocurrency][:symbol])}
top_100.select { |cc| cc["symbol] == (params[:cryptocurrency][:symbol])}
top_100[0]["symbol"]
top_100[0].symbol
top_100.select { |cc| cc.symbol == (params[:cryptocurrency][:symbol])}
@cryptocurrency 
exit
top_100[0]
top_100.select { |cc| cc.symbol == (params[:cryptocurrency][:symbol])}
cc.symbol 
(params[:cryptocurrency][:symbol])
params
top_100[0]
found
top_100
exit
params
top_100.select { |cc| cc.symbol == (params[:cryptocurrency][:symbol])}
cryptocurrency
@cryptocurrency
found_cryptocurrency
top_100
exit
found_cryptocurrency
top_100
cryptocurrency
exit
data
JSON.parse(RestClient.get(url1).body)
url1 = "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false"
JSON.parse(RestClient.get(url1).body)
data1
data
exit
data
exit
cryptocurrency.symbol
new_price
cryptocurrency
new_price
exit
new_price
exit
new_price
exit
new_price
data
new_price
exit
new_price
new_pricer
exit
new_price
exit
data
exit
data
new_price
exit
new_price
cryptocurrency.coingecko_id
data 
data
new_price
exit
params 
exit
cryptocurrency_params
exit
cc
cc.id = User.first.id
cc = Cryptocurrency.create(symbol: "BTC") 
params
cryptocurrency_params
exit
params[:cryptocurrency][:symbol].downcase
(params[:cryptocurrency][:symbol]).downcase
(params[:cryptocurrency][:symbol])
Cryptocurrency.find_by(symbol: params[:cryptocurrency][:symbol])
render json: Cryptocurrency.find_by(symbol: params[:cryptocurrency][:symbol])
Cryptocurrency.find_by(symbol: params[:cryptocurrency][:symbol]).nil?
exit
(params[:cryptocurrency][:total_worth])
(params[:cryptocurrency][:quantity])
(params[:cryptocurrency][:buy_price])
cryptocurrency['id']
price(cryptocurrency['id'])
cryptocurrency['symbol']
symbol: cryptocurrency['symbol']
cryptocurrency = search(params[:cryptocurrency][:symbol])
params
exit
:symbol => 'tether'
:symbol => cryptocurrency['symbol']
cryptocurrency = search(params[:cryptocurrency][:symbol])
:symbol => cryptocurrency['symbol']
exit
Cryptocurrency.all
cryptocurrency['symbol'] == (params[:cryptocurrency][:symbol])
Cryptocurrency.find_by(symbol: (params[:cryptocurrency][:symbol]))
cryptocurrency = search(params[:cryptocurrency][:symbol])
exit
Cryptocurrency.find_by(symbol: (params[:cryptocurrency][:symbol]))
cryptocurrency['symbol'] == (params[:cryptocurrency][:symbol])
cryptocurrency['id']
price(cryptocurrency['id'])
cryptocurrency['symbol']
cryptocurrency = search(params[:cryptocurrency][:symbol])
cryptocurrency['id']
coingecko_id: cryptocurrency['id']
exit
cryptocurrency['symbol']
cryptocurrency['symbol'].downcase
price(cryptocurrency['id'])
cryptocurrency['id']
coingecko_id: cryptocurrency['id']
exit
Cryptocurrency
price(cryptocurrency['id'])
cryptocurrency['symbol']
cryptocurrency = search(params[:cryptocurrency][:symbol])
exit
url = "#{COINGECKO_URL}/simple/price?ids=#{name}&vs_currencies=usd"
exit
cryptocurrency = search(params[:cryptocurrency][:symbol])
current_price
exit
cryptocurrency['symbol'].downcase
(params[:cryptocurrency][:symbol])
cryptocurrency['symbol']
cryptocurrency['symbol'].downcase == (params[:cryptocurrency][:symbol])
 cryptocurrency = search(params[:cryptocurrency][:symbol])
exit
url = "#{COINGECKO_URL}/search?query=#{query}"
exit
url
url = "#{COINGECKO_URL}/search?query=#{query}"
exit
cryptocurrency = search(params[:symbol])
params
params['symbol']
params[:symbol]
cryptocurrency['symbol'].downcase
cryptocurrency['symbol']
cryptocurrency['symbol'].downcase == params[:symbol]
cryptocurrency = search(params[:symbol])
        )
          coingecko_id: cryptocurrency['id'],
          price: price(cryptocurrency['id']),
          symbol: cryptocurrency['symbol'].downcase,
        Cryptocurrency.create(
current_price =
cryptocurrency
params
current_price
exit
current_price
cryptocurrency
cryptocurrency = search(params[:symbol])
JSON.parse(RestClient.get(url).body)['coins'].first
params
exit
set_cryptocurrency
exit
set_cryptocurrency
